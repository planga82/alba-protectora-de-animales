// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.base.entidades.animales;

import com.base.entidades.animales.HistoricoUbicaciones;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect HistoricoUbicaciones_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager HistoricoUbicaciones.entityManager;
    
    public static final EntityManager HistoricoUbicaciones.entityManager() {
        EntityManager em = new HistoricoUbicaciones().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long HistoricoUbicaciones.countHistoricoUbicacioneses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM HistoricoUbicaciones o", Long.class).getSingleResult();
    }
    
    public static List<HistoricoUbicaciones> HistoricoUbicaciones.findAllHistoricoUbicacioneses() {
        return entityManager().createQuery("SELECT o FROM HistoricoUbicaciones o", HistoricoUbicaciones.class).getResultList();
    }
    
    public static HistoricoUbicaciones HistoricoUbicaciones.findHistoricoUbicaciones(long identificador) {
        return entityManager().find(HistoricoUbicaciones.class, identificador);
    }
    
    public static List<HistoricoUbicaciones> HistoricoUbicaciones.findHistoricoUbicacionesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM HistoricoUbicaciones o", HistoricoUbicaciones.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void HistoricoUbicaciones.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void HistoricoUbicaciones.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            HistoricoUbicaciones attached = HistoricoUbicaciones.findHistoricoUbicaciones(this.identificador);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void HistoricoUbicaciones.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void HistoricoUbicaciones.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public HistoricoUbicaciones HistoricoUbicaciones.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        HistoricoUbicaciones merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
